import logging
import os
import json
import asyncio
import aiohttp
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart, CommandObject, StateFilter
from aiogram.types import (
    Message, 
    CallbackQuery, 
    FSInputFile,
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from vpn_users_utils import load_vpn_users, save_vpn_users

# --- Constants ---
TELEGRAM_BOT_TOKEN = "TELEGRAM_BOT_TOKEN"
OPENROUTER_API_URL = "OPENROUTER_API_URL"
OPENROUTER_API_KEY = "OPENROUTER_API_KEY"
ADMIN_IDS = [403786501]
USERS_DB_FILE = "users.json"
HISTORY_LIMIT = 10

# --- Global Variables ---
user_histories = {}
pending_vpn_requests = {}

# --- Bot Settings ---
BOT_SETTINGS = {
    "temperature": 0.3,
    "max_tokens": 2048,
    "stream": True,
}

# --- State Classes ---
class BroadcastState(StatesGroup):
    waiting_for_message = State()

class BuyVPNState(StatesGroup):
    select_period = State()
    wait_payment = State()
    admin_grant = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ReplyKeyboardMarkup) ---
def get_user_keyboard(user_id=None):
    keyboard = [
        [KeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å GPT")],
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å VPN")],
        [KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    if user_id is not None and is_admin(user_id):
        keyboard.append([KeyboardButton(text="–ê–¥–º–∏–Ω-–º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=storage)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
async def load_users():
    """
    Load user data from JSON file. Creates default structure if file doesn't exist.
    
    Returns:
        dict: User data containing 'users' and 'blocked' lists
    """
    try:
        if not os.path.exists(USERS_DB_FILE):
            with open(USERS_DB_FILE, "w", encoding='utf-8') as f:
                json.dump({"users": {}, "blocked": []}, f)
        with open(USERS_DB_FILE, "r", encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"Error loading users: {e}")
        return {"users": {}, "blocked": []}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
def save_users(data):
    """
    Save user data to JSON file.
    
    Args:
        data (dict): User data to save
    """
    try:
        with open(USERS_DB_FILE, "w", encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"Error saving users: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id: int) -> bool:
    """
    Check if a user is an administrator.
    
    Args:
        user_id (int): Telegram user ID
        
    Returns:
        bool: True if user is admin, False otherwise
    """
    return user_id in ADMIN_IDS

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_blocked(user_id: int, users_data: dict) -> bool:
    """
    Check if a user is blocked.
    
    Args:
        user_id (int): Telegram user ID
        users_data (dict): User database
        
    Returns:
        bool: True if user is blocked, False otherwise
    """
    return user_id in users_data.get("blocked", [])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def get_admin_keyboard(cancel_button=False):
    keyboard = []

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard.append([
        types.InlineKeyboardButton(text="üë•–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_view_users"),
        types.InlineKeyboardButton(text="‚úÖGPT", callback_data="admin_open_gpt_access"),
        types.InlineKeyboardButton(text="üö´GPT", callback_data="admin_close_gpt_access"),
    ])
    keyboard.append([
        types.InlineKeyboardButton(text="‚úâÔ∏è–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
    ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞", –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞
    if cancel_button:
        keyboard.append([
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
        ])

    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
@dp.callback_query(lambda c: c.data == "admin_lock_menu")
async def show_lock_menu(callback: types.CallbackQuery):
    users_data = await load_users()
    buttons = []
    for uid, user in users_data["users"].items():
        username = user.get("username", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        if int(uid) in users_data.get("blocked", []):
            btn = types.InlineKeyboardButton(
                text=f"{username} ({uid}) ‚úÖ",
                callback_data=f"unblock_user_{uid}"
            )
        else:
            btn = types.InlineKeyboardButton(
                text=f"{username} ({uid}) ‚ùå",
                callback_data=f"block_user_{uid}"
            )
        buttons.append([btn])
    if not buttons:
        buttons = [[types.InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_menu")]]
    buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message(lambda msg: msg.text is not None and msg.text.startswith("–ê–¥–º–∏–Ω-–º–µ–Ω—é"))
async def admin_command(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GPT
@dp.callback_query(lambda c: c.data == "request_gpt_access")
async def process_gpt_access_request(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "Unknown"
    users_data = await load_users()
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if str(user_id) not in users_data["users"]:
        users_data["users"][str(user_id)] = {"username": username, "gpt_access": False}
        save_users(users_data)

    # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—Ä–æ—Å–µ
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø –∫ GPT.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="‚úÖ",
                                callback_data=f"admin_approve_gpt_{user_id}"
                            ),
                            types.InlineKeyboardButton(
                                text="‚ùå",
                                callback_data=f"admin_decline_gpt_{user_id}"
                            )
                        ]
                    ]
                )
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await callback.message.edit_text(
        "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è."
    )
    await callback.answer()

# === –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø ===
@dp.callback_query(lambda c: c.data and c.data.startswith("admin_approve_gpt_"))
async def admin_approve_gpt(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    user_id = callback.data.split("admin_approve_gpt_")[1]
    users_data = await load_users()
    if user_id in users_data["users"]:
        users_data["users"][user_id]["gpt_access"] = True
        save_users(users_data)
        try:
            await bot.send_message(int(user_id), "‚úÖ –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ GPT", reply_markup=get_user_keyboard())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.edit_text("–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–∫—Ä—ã—Ç.")
    else:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

# === –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø ===
@dp.callback_query(lambda c: c.data and c.data.startswith("admin_decline_gpt_"))
async def admin_decline_gpt(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    user_id = callback.data.split("admin_decline_gpt_")[1]
    try:
        await bot.send_message(int(user_id), "üö´ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ GPT –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.", reply_markup=get_user_keyboard())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    await callback.message.edit_text("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫
@dp.callback_query(lambda c: c.data and c.data.startswith("admin_grant_gpt_"))
async def admin_grant_gpt(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    user_id = callback.data.split("admin_grant_gpt_")[1]
    users_data = await load_users()
    if user_id in users_data["users"]:
        users_data["users"][user_id]["gpt_access"] = True
        save_users(users_data)
        logging.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤—ã–¥–∞–ª –¥–æ—Å—Ç—É–ø –∫ GPT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        try:
            await bot.send_message(int(user_id), "‚úÖ –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ GPT!", reply_markup=get_user_keyboard())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.", show_alert=True)
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
        users_data = await load_users()
        buttons = []
        for uid, info in users_data["users"].items():
            if not info.get("gpt_access", False):
                username = info.get("username", "Unknown")
                buttons.append([
                    types.InlineKeyboardButton(
                        text=f"{username} ({uid})",
                        callback_data=f"admin_grant_gpt_{uid}"
                    )
                ])
        if not buttons:
            buttons = [[types.InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞", callback_data="admin_menu")]]
        buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –û–¢–ö–†–´–¢–ò–Ø –¥–æ—Å—Ç—É–ø–∞ –∫ GPT:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    else:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫
@dp.callback_query(lambda c: c.data and c.data.startswith("admin_revoke_gpt_"))
async def admin_revoke_gpt(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    user_id = callback.data.split("admin_revoke_gpt_")[1]
    users_data = await load_users()
    if user_id in users_data["users"]:
        users_data["users"][user_id]["gpt_access"] = False
        save_users(users_data)
        logging.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–∫—Ä—ã–ª –¥–æ—Å—Ç—É–ø –∫ GPT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        try:
            await bot.send_message(int(user_id), "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ GPT –±—ã–ª –∑–∞–∫—Ä—ã—Ç.", reply_markup=get_user_keyboard())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
        users_data = await load_users()
        buttons = []
        for uid, info in users_data["users"].items():
            if info.get("gpt_access", False):
                username = info.get("username", "Unknown")
                buttons.append([
                    types.InlineKeyboardButton(
                        text=f"{username} ({uid})",
                        callback_data=f"admin_revoke_gpt_{uid}"
                    )
                ])
        if not buttons:
            buttons = [[types.InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º", callback_data="admin_menu")]]
        buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ó–ê–ö–†–´–¢–ò–Ø –¥–æ—Å—Ç—É–ø–∞ –∫ GPT:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    else:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ GPT
@dp.callback_query(lambda c: c.data == "admin_open_gpt_access")
async def open_gpt_access_menu(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    users_data = await load_users()
    buttons = []
    for uid, info in users_data["users"].items():
        if not info.get("gpt_access", False):
            username = info.get("username", "Unknown")
            buttons.append([
                types.InlineKeyboardButton(
                    text=f"{username} ({uid})",
                    callback_data=f"admin_grant_gpt_{uid}"
                )
            ])
    if not buttons:
        buttons = [[types.InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞", callback_data="admin_menu")]]
    buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –û–¢–ö–†–´–¢–ò–Ø –¥–æ—Å—Ç—É–ø–∞ –∫ GPT:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GPT
@dp.callback_query(lambda c: c.data == "admin_close_gpt_access")
async def close_gpt_access_menu(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    users_data = await load_users()
    buttons = []
    for uid, info in users_data["users"].items():
        if info.get("gpt_access", False):
            username = info.get("username", "Unknown")
            buttons.append([
                types.InlineKeyboardButton(
                    text=f"{username} ({uid})",
                    callback_data=f"admin_revoke_gpt_{uid}"
                )
            ])
    if not buttons:
        buttons = [[types.InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º", callback_data="admin_menu")]]
    buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ó–ê–ö–†–´–¢–ò–Ø –¥–æ—Å—Ç—É–ø–∞ –∫ GPT:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@dp.callback_query()
async def handle_admin_buttons(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if callback.data == "admin_view_users":
        users_data = await load_users()
        users_list = []
        for user_id, user_info in users_data["users"].items():
            username = user_info.get("username", "Unknown")
            gpt_access = user_info.get("gpt_access", False)
            users_list.append(f"{user_id} ({username}) | GPT: {'‚úÖ' if gpt_access else '‚ùå'}")
        users_text = "\n".join(users_list) or "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        await callback.message.edit_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users_text}",
            reply_markup=get_admin_keyboard()
        )
    elif callback.data == "admin_block_user":
        users_data = await load_users()
        buttons = []
        for uid, info in users_data["users"].items():
            username = info.get("username", "Unknown")
            if int(uid) in users_data.get("blocked", []):
                btn = types.InlineKeyboardButton(
                    text=f"{username} ({uid}) ‚úÖ",
                    callback_data=f"unblock_user_{uid}"
                )
            else:
                btn = types.InlineKeyboardButton(
                    text=f"{username} ({uid}) ‚ùå",
                    callback_data=f"block_user_{uid}"
                )
            buttons.append([btn])
        if not buttons:
            buttons = [[types.InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_menu")]]
        buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    elif callback.data == "admin_menu":
        try:
            await callback.message.edit_text(
                "–ê–¥–º–∏–Ω-–º–µ–Ω—é:",
                reply_markup=get_admin_keyboard()
            )
        except Exception:
            try:
                await callback.message.edit_reply_markup(reply_markup=get_admin_keyboard())
            except Exception as e2:
                await callback.answer("–û—à–∏–±–∫–∞: " + str(e2), show_alert=True)
                return
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data and c.data.startswith("block_user_"))
async def block_user_callback(callback: CallbackQuery):
    print(f"block_user_callback: {callback.data}")
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    user_id = callback.data.split("block_user_")[1]
    users_data = await load_users()
    try:
        user_id_int = int(user_id)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return
    if user_id_int not in [int(uid) for uid in users_data.get("users", {}).keys()]:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    if user_id_int not in users_data.get("blocked", []):
        users_data["blocked"].append(user_id_int)
        save_users(users_data)
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
    else:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
    await show_lock_menu(callback)
    return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data and c.data.startswith("unblock_user_"))
async def unblock_user_callback(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    user_id = callback.data.split("unblock_user_")[1]
    users_data = await load_users()
    if int(user_id) in users_data.get("blocked", []):
        users_data["blocked"].remove(int(user_id))
        save_users(users_data)
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
    else:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
    # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
    await show_lock_menu(callback)
    return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—ã–ª–∫–∞"
@dp.callback_query(lambda c: c.data == "admin_broadcast")
async def admin_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    await state.set_state(BroadcastState.waiting_for_message)
    try:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            reply_markup=get_admin_keyboard(cancel_button=True)
        )
    except Exception:
        pass
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        reply_markup=get_admin_keyboard(cancel_button=True)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats_callback(callback: types.CallbackQuery):
    users_data = await load_users()
    total_users = len(users_data["users"])
    blocked_users = len(users_data["blocked"])
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_users}\n"
    )
    await callback.message.edit_text(
        stats_text,
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(lambda callback: callback.data == "cancel_broadcast", BroadcastState.waiting_for_message)
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(BroadcastState.waiting_for_message)
async def process_broadcast(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await state.clear()
        return

    broadcast_text = message.text
    users_data = await load_users()
    count = 0

    blocked_ids = set(str(uid) for uid in users_data.get("blocked", []))
    for uid, user_info in users_data.get("users", {}).items():
        if uid not in blocked_ids:
            try:
                await bot.send_message(chat_id=int(uid), text=broadcast_text)
                count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()
    await message.answer(
        "–ê–¥–º–∏–Ω-–º–µ–Ω—é:",
        reply_markup=get_admin_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(lambda msg: msg.text is not None and msg.text.startswith("/start"))
async def send_welcome(message: types.Message):
    """
    Handle the /start command.
    
    Args:
        message (Message): User's message
    """
    try:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. "
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
    except Exception as e:
        logging.error(f"Error in send_welcome: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(lambda msg: msg.text is not None and msg.text.startswith("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
async def help_command(message: types.Message):
    """
    Handle the help command.
    
    Args:
        message (Message): User's message
    """
    try:
        await message.answer(
            "‚ÑπÔ∏è –Ø –º–æ–≥—É:\n"
            "1. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n"
            "2. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "3. –ü–æ–º–æ–≥–∞—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π VPN\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!",
            reply_markup=get_user_keyboard()
        )
    except Exception as e:
        logging.error(f"Error in help_command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GPT ---
def get_gpt_request_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ GPT", callback_data="request_gpt_access")]
        ]
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ GPT
from aiogram.filters import Command, CommandStart, CommandObject, StateFilter

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å)
@dp.message(lambda msg: msg.photo is not None)
async def handle_image_message(message: types.Message):
    """
    Handle image messages from users.
    
    Args:
        message (Message): User's message containing photo
    """
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"

    try:
        # Load user data
        users_data = await load_users()

        # Add user to database if not exists
        if str(user_id) not in users_data["users"]:
            users_data["users"][str(user_id)] = {
                "username": username,
                "gpt_access": False
            }
            save_users(users_data)

        # Check if user is blocked
        if is_blocked(user_id, users_data):
            await message.answer(
                "–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
                reply_markup=get_user_keyboard()
            )
            return

        # Check GPT access
        if not users_data["users"][str(user_id)].get("gpt_access", False):
            await message.answer(
                "–î–æ—Å—Ç—É–ø –∫ GPT –ø–æ–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø.",
                reply_markup=get_gpt_request_keyboard()
            )
            return

        # Get image URL
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        image_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"

        # Get caption or default text
        caption = message.caption or "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"

        logging.info(f"Received image from user {user_id} with caption: {caption}")

        # Add message to history
        user_histories.setdefault(user_id, [])
        user_histories[user_id].append({"role": "user", "content": caption})
        if len(user_histories[user_id]) > HISTORY_LIMIT:
            user_histories[user_id] = user_histories[user_id][-HISTORY_LIMIT:]

        # Process with OpenRouter
        await query_openrouter_stream(caption, message, image_url=image_url)

    except Exception as e:
        logging.error(f"Error in handle_image_message: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å)
@dp.message(StateFilter(None), lambda msg: msg.text)
async def handle_text_message(message: Message, state: FSMContext):
    """
    Handle text messages from users.
    
    Args:
        message (Message): User's message
        state (FSMContext): FSM context
    """
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    user_input = message.text

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ ---
    if user_input.strip() == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
        user_histories[user_id] = []
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!", reply_markup=get_user_keyboard())
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ ---
    if user_input.strip() == "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å GPT":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())
        return

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ VPN
    if user_input.strip() == "–ö—É–ø–∏—Ç—å VPN":
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    users_data = await load_users()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if str(user_id) not in users_data["users"]:
        users_data["users"][str(user_id)] = {"username": username, "gpt_access": False}
        save_users(users_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_blocked(user_id, users_data):
        await message.answer("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_user_keyboard())
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ GPT —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–∞ —Å GPT
    if not users_data["users"][str(user_id)].get("gpt_access", False):
        await message.answer(
            "–î–æ—Å—Ç—É–ø –∫ GPT –ø–æ–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø.",
            reply_markup=get_gpt_request_keyboard()
        )
        return

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {user_input}")

    # --- –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é ---
    user_histories.setdefault(user_id, [])
    user_histories[user_id].append({"role": "user", "content": user_input})
    if len(user_histories[user_id]) > HISTORY_LIMIT:
        user_histories[user_id] = user_histories[user_id][-HISTORY_LIMIT:]

    try:
        await query_openrouter_stream(user_input, message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_user_keyboard())

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ VPN ---
def get_vpn_inline_keyboard() -> InlineKeyboardMarkup:
    """
    Create inline keyboard for VPN period selection.
    
    Returns:
        InlineKeyboardMarkup: Keyboard with VPN period options
    """
    try:
        keyboard = [
            [
                types.InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data="vpn_period_1m"),
                types.InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞", callback_data="vpn_period_3m")
            ],
            [
                types.InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤", callback_data="vpn_period_6m"),
                types.InlineKeyboardButton(text="1 –≥–æ–¥", callback_data="vpn_period_1y")
            ]
        ]
        return types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logging.error(f"Error creating VPN keyboard: {e}")
        return None

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers():
    """Register all message and callback handlers."""
    # VPN handlers
    dp.message.register(handle_buy_vpn, lambda msg: msg.text and msg.text.strip() == "–ö—É–ø–∏—Ç—å VPN")
    dp.callback_query.register(select_period_inline, StateFilter(BuyVPNState.select_period), lambda c: c.data.startswith("vpn_period_"))
    dp.callback_query.register(paid_inline, StateFilter(BuyVPNState.wait_payment), lambda c: c.data == "vpn_paid")
    dp.callback_query.register(cancel_vpn_purchase, lambda c: c.data == "vpn_cancel")
    dp.callback_query.register(reject_vpn_access, lambda c: c.data and c.data.startswith("vpn_reject_"))
    
    # Admin handlers
    dp.message.register(admin_command, lambda msg: msg.text is not None and msg.text.startswith("–ê–¥–º–∏–Ω-–º–µ–Ω—é"))
    dp.callback_query.register(show_lock_menu, lambda c: c.data == "admin_lock_menu")
    dp.callback_query.register(process_gpt_access_request, lambda c: c.data == "request_gpt_access")
    dp.callback_query.register(admin_approve_gpt, lambda c: c.data and c.data.startswith("admin_approve_gpt_"))
    dp.callback_query.register(admin_decline_gpt, lambda c: c.data and c.data.startswith("admin_decline_gpt_"))
    dp.callback_query.register(admin_grant_gpt, lambda c: c.data and c.data.startswith("admin_grant_gpt_"))
    dp.callback_query.register(admin_revoke_gpt, lambda c: c.data and c.data.startswith("admin_revoke_gpt_"))
    dp.callback_query.register(open_gpt_access_menu, lambda c: c.data == "admin_open_gpt_access")
    dp.callback_query.register(close_gpt_access_menu, lambda c: c.data == "admin_close_gpt_access")
    dp.callback_query.register(handle_admin_buttons)
    dp.callback_query.register(block_user_callback, lambda c: c.data and c.data.startswith("block_user_"))
    dp.callback_query.register(unblock_user_callback, lambda c: c.data and c.data.startswith("unblock_user_"))
    dp.callback_query.register(admin_broadcast_callback, lambda c: c.data == "admin_broadcast")
    dp.callback_query.register(admin_stats_callback, lambda c: c.data == "admin_stats")
    dp.callback_query.register(cancel_broadcast, lambda callback: callback.data == "cancel_broadcast", BroadcastState.waiting_for_message)
    
    # Message handlers
    dp.message.register(send_welcome, lambda msg: msg.text is not None and msg.text.startswith("/start"))
    dp.message.register(help_command, lambda msg: msg.text is not None and msg.text.startswith("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    dp.message.register(handle_image_message, lambda msg: msg.photo is not None)
    dp.message.register(handle_text_message, StateFilter(None), lambda msg: msg.text)
    dp.message.register(process_broadcast, BroadcastState.waiting_for_message)
    
    # Chat member handler
    dp.chat_member.register(handle_new_chat_members)

@dp.message(lambda msg: msg.text and msg.text.strip() == "–ö—É–ø–∏—Ç—å VPN")
async def handle_buy_vpn(message: Message, state: FSMContext):
    """
    Handle the initial VPN purchase request.
    
    Args:
        message (Message): User's message
        state (FSMContext): FSM context
    """
    try:
        logging.info(f"VPN purchase request from user {message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        users_data = await load_users()
        if is_blocked(message.from_user.id, users_data):
            await message.answer(
                "–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
                reply_markup=get_user_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        keyboard = get_vpn_inline_keyboard()
        if not keyboard:
            logging.error("Failed to create VPN keyboard")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_user_keyboard()
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VPN?",
            reply_markup=keyboard
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(BuyVPNState.select_period)
        logging.info(f"Set state to BuyVPNState.select_period for user {message.from_user.id}")
        
    except Exception as e:
        logging.error(f"Error in handle_buy_vpn: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_keyboard()
        )

@dp.callback_query(StateFilter(BuyVPNState.select_period), lambda c: c.data.startswith("vpn_period_"))
async def select_period_inline(callback: CallbackQuery, state: FSMContext):
    """
    Handle VPN period selection.
    
    Args:
        callback (CallbackQuery): Callback query
        state (FSMContext): FSM context
    """
    try:
        logging.info(f"VPN period selection from user {callback.from_user.id}: {callback.data}")
        
        period_map = {
            "vpn_period_1m": {"period": "1 –º–µ—Å—è—Ü", "price": 599, "days": 30},
            "vpn_period_3m": {"period": "3 –º–µ—Å—è—Ü–∞", "price": 1797, "days": 90},
            "vpn_period_6m": {"period": "6 –º–µ—Å—è—Ü–µ–≤", "price": 3594, "days": 180},
            "vpn_period_1y": {"period": "1 –≥–æ–¥", "price": 7188, "days": 365},
        }
        
        if callback.data not in period_map:
            logging.error(f"Invalid period selected: {callback.data}")
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            return
            
        selected = period_map[callback.data]
        await state.update_data(
            period=selected["period"],
            price=selected["price"],
            days=selected["days"],
            username=callback.from_user.username or "Unknown"
        )
        
        pending_vpn_requests[callback.from_user.id] = await state.get_data()
        
        payment_text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected['period']}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {selected['price']} —Ä—É–±–ª–µ–π.\n\n"
            "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –°–ë–ü:\n"
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +79991234567\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—á–µ–Ω–æ'."
        )
        
        await callback.message.edit_text(
            payment_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–û–ø–ª–∞—á–µ–Ω–æ", callback_data="vpn_paid")],
                [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="vpn_cancel")]
            ])
        )
        await state.set_state(BuyVPNState.wait_payment)
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error in select_period_inline: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_keyboard()
        )
        await state.finish()

@dp.callback_query(lambda c: c.data == "vpn_cancel")
async def cancel_vpn_purchase(callback: CallbackQuery, state: FSMContext):
    """
    Handle VPN purchase cancellation.
    
    Args:
        callback (CallbackQuery): Callback query
        state (FSMContext): FSM context
    """
    try:
        user_id = callback.from_user.id
        if user_id in pending_vpn_requests:
            del pending_vpn_requests[user_id]
        await state.finish()
        await callback.message.edit_text(
            "–ü–æ–∫—É–ø–∫–∞ VPN –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_user_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"Error in cancel_vpn_purchase: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@dp.callback_query(StateFilter(BuyVPNState.wait_payment), lambda c: c.data == "vpn_paid")
async def paid_inline(callback: CallbackQuery, state: FSMContext):
    """
    Handle VPN payment confirmation.
    
    Args:
        callback (CallbackQuery): Callback query
        state (FSMContext): FSM context
    """
    try:
        data = await state.get_data()
        user_id = callback.from_user.id
        username = callback.from_user.username or "Unknown"
        
        await callback.message.edit_text(
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        
        # Notify admins
        admin_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"vpn_grant_{user_id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"vpn_reject_{user_id}"
                )
            ]
        ])
        
        admin_message = (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ VPN!\n"
            f"–û—Ç: @{username} (ID: {user_id})\n"
            f"–ü–µ—Ä–∏–æ–¥: {data.get('period', 'N/A')}\n"
            f"–°—É–º–º–∞: {data.get('price', 'N/A')} —Ä—É–±–ª–µ–π"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    reply_markup=admin_keyboard
                )
            except Exception as e:
                logging.error(f"Failed to notify admin {admin_id}: {e}")
        
        await state.set_state(BuyVPNState.admin_grant)
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error in paid_inline: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_user_keyboard()
        )
        await state.finish()

@dp.callback_query(lambda c: c.data and c.data.startswith("vpn_reject_"))
async def reject_vpn_access(callback: CallbackQuery):
    """
    Handle VPN access rejection by admin.
    
    Args:
        callback (CallbackQuery): Callback query
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
        
    try:
        user_id = int(callback.data.split("_")[-1])
        if user_id in pending_vpn_requests:
            del pending_vpn_requests[user_id]
            
        try:
            await bot.send_message(
                chat_id=user_id,
                text="‚ùå –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=get_user_keyboard()
            )
        except Exception as e:
            logging.error(f"Failed to notify user {user_id} about rejection: {e}")
            
        await callback.message.edit_text("–î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–∞–∑–µ.", show_alert=True)
        
    except Exception as e:
        logging.error(f"Error in reject_vpn_access: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π
async def query_openrouter_stream(prompt: str, message: Message, image_url: str = None):
    """
    Send a streaming request to OpenRouter API and handle the response.
    
    Args:
        prompt (str): User's input prompt
        message (Message): Original Telegram message
        image_url (str, optional): URL of the image if present
    """
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://yourwebsite.com",
        "X-Title": "Telegram Bot",
    }

    user_id = message.from_user.id
    messages = user_histories.get(user_id, [])[:]
    
    if image_url and messages and messages[-1]["role"] == "user":
        messages[-1]["content"] = [
            {"type": "text", "text": messages[-1]["content"]},
            {"type": "image_url", "image_url": {"url": image_url}}
        ]

    payload = {
        "model": "qwen/qwen2.5-vl-3b-instruct:free",
        "messages": messages if messages else [{"role": "user", "content": prompt}],
        "temperature": BOT_SETTINGS["temperature"],
        "max_tokens": BOT_SETTINGS["max_tokens"],
        "stream": BOT_SETTINGS["stream"],
    }

    sent_message = await message.answer(".")
    buffer = ""
    last_sent_text = ""
    last_update_time = asyncio.get_event_loop().time()
    wave_states = [".", "..", "...", ".."]
    wave_index = 0
    wave_task_running = True
    last_wave_text = ""

    async def animate_wave():
        nonlocal wave_index, wave_task_running, last_wave_text
        try:
            while wave_task_running:
                await asyncio.sleep(0.6)
                if not wave_task_running:
                    break
                new_text = wave_states[wave_index]
                if new_text != last_wave_text:
                    try:
                        await bot.edit_message_text(
                            chat_id=sent_message.chat.id,
                            message_id=sent_message.message_id,
                            text=new_text
                        )
                        last_wave_text = new_text
                    except Exception as e:
                        if "message is not modified" not in str(e):
                            logging.error(f"Animation error: {e}")
                wave_index = (wave_index + 1) % len(wave_states)
        except Exception as e:
            logging.error(f"Animation error: {e}")

    wave_task = asyncio.create_task(animate_wave())

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=30) as response:
                if response.status == 200:
                    async for chunk in response.content.iter_any():
                        if not wave_task_running:
                            break
                        try:
                            chunk_text = chunk.decode("utf-8")
                            for line in chunk_text.split("\n"):
                                if not line.strip():
                                    continue
                                if line.startswith("data: "):
                                    line_data = line[6:].strip()
                                    if line_data == "[DONE]":
                                        break
                                    try:
                                        json_data = json.loads(line_data)
                                        content = json_data.get("choices", [{}])[0].get("delta", {}).get("content", "")
                                        if content:
                                            buffer += content

                                            current_time = asyncio.get_event_loop().time()
                                            if len(buffer) > 40 and current_time - last_update_time >= 4:
                                                new_text = buffer + "..."
                                                if new_text != last_sent_text:
                                                    try:
                                                        await bot.edit_message_text(
                                                            chat_id=sent_message.chat.id,
                                                            message_id=sent_message.message_id,
                                                            text=new_text
                                                        )
                                                        last_sent_text = new_text
                                                        last_update_time = current_time
                                                    except Exception as e:
                                                        if "message is not modified" not in str(e):
                                                            logging.error(f"Message update error: {e}")
                                    except json.JSONDecodeError:
                                        logging.error(f"JSON decode error in line: {line}")
                                    except Exception as e:
                                        logging.error(f"Content processing error: {e}")
                        except Exception as e:
                            logging.error(f"Chunk processing error: {e}")
                    
                    if buffer and buffer != last_sent_text:
                        try:
                            await bot.edit_message_text(
                                chat_id=sent_message.chat.id,
                                message_id=sent_message.message_id,
                                text=buffer
                            )
                        except Exception as e:
                            if "message is not modified" not in str(e):
                                logging.error(f"Final message update error: {e}")
                else:
                    try:
                        error_data = await response.json()
                        error_message = error_data.get("error", {}).get("message", "Unknown error")
                        logging.error(f"OpenRouter error: {response.status}, {error_message}")
                        await bot.edit_message_text(
                            chat_id=sent_message.chat.id,
                            message_id=sent_message.message_id,
                            text=f"Error {response.status}: {error_message}"
                        )
                    except Exception as e:
                        logging.error(f"Error response processing error: {e}")
                        await bot.edit_message_text(
                            chat_id=sent_message.chat.id,
                            message_id=sent_message.message_id,
                            text=f"Error {response.status}: Failed to process error message"
                        )
    except asyncio.TimeoutError:
        await bot.edit_message_text(
            chat_id=sent_message.chat.id,
            message_id=sent_message.message_id,
            text="Request timed out. Please try again."
        )
    except Exception as e:
        logging.error(f"Request error: {e}")
        await bot.edit_message_text(
            chat_id=sent_message.chat.id,
            message_id=sent_message.message_id,
            text="An error occurred. Please try again later."
        )
    finally:
        wave_task_running = False
        try:
            await wave_task
        except Exception as e:
            logging.error(f"Wave task cleanup error: {e}")

    if buffer:
        user_histories.setdefault(user_id, [])
        user_histories[user_id].append({"role": "assistant", "content": buffer})
        if len(user_histories[user_id]) > HISTORY_LIMIT:
            user_histories[user_id] = user_histories[user_id][-HISTORY_LIMIT:]

# –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ /start –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
@dp.chat_member()
async def handle_new_chat_members(event: types.ChatMemberUpdated):
    if event.new_chat_member.status == "member":
        try:
            await bot.send_message(
                chat_id=event.chat.id,
                text="/start"
            )
        except Exception:
            pass

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """
    Main function to start the bot.
    """
    try:
        logging.info("Starting bot...")
        register_handlers()  # Register all handlers
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Error in main: {e}")
    finally:
        logging.info("Bot stopped")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped manually")
    except Exception as e:
        logging.error(f"Critical error: {e}")
